#include<iostream>


using namespace std;

template<class T>
struct Node
{
	T data;
	struct Node *next;
};

template<class T>
class Queue
{
	private:
		struct Node<T> *Head;
		struct Node<T> *Tail;
	public:
		Queue();
		void Enqueue(T no);
		T Dequeue();
		void Display();
};
template<class T>
Queue<T>::Queue()
{
	Head = NULL;
	Tail = NULL;
}
template<class T>
void Queue<T>::Enqueue(T no)
{
	struct Node<T> *newN = NULL;
	newN = new struct Node<T>;

	newN -> data = no;
	newN -> next = NULL;

	if((Head==NULL) && (Tail==NULL))
	{
		Head = newN;
		Tail = newN;
	}
	else
	{
		Tail -> next = newN;
		Tail = Tail -> next;
	}
}
template<class T>
int Queue<T>::Dequeue()
{
	if((Head==NULL) && (Tail==NULL))
	{
		cout<<"Queue is Empty:-";
		return 0;
	}
	else if(Head==Tail)
	{
		T no = Head -> data;
		delete Head;
		Head = NULL;
		Tail = NULL;
		return no;
	}
	else
	{
		T no = Head -> data;
		struct Node<T> *ptr = NULL;
		ptr = Head;
		Head = Head -> next;
		delete ptr;
		return no;
	}
}
template<class T>
void Queue<T>::Display()
{
	struct Node<T> *Temp = Head;
	while(Temp!=NULL)
	{
		cout<<"|"<<Temp -> data<<"|-";
		Temp = Temp -> next;
	}
	cout<<"\n";
}
int main()
{
	Queue <int>obj1;
	Queue <char>obj2;

	obj1.Enqueue(11);
	obj1.Enqueue(21);
	obj1.Enqueue(51);

	obj1.Display();
}

